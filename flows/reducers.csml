import {RemoveString,FindObjectArray,FilterObjectArray,RemoveDuplicates} from global_utility
import {SubscribeBroadcast,SubscribeReminder, PostMessage, GetAirtableActivities, GetCEP, PostDataHub, CreateUserDataLayer} from global_endpoints
import {MenuSelection, FixIndex, QuizSelection, ValidateType, ValidateName, ValidateEmail, MessageBuilder, SelectOption, GlobalCommands, FindActivityByField, GetNextActivity, GetNextQuestion, RenderOptions, SelectCourse, Validate} from global_functions

start:
  say "Welcome to reducers lib ðŸ‘‹"


  hold

  goto flow menu

//------------------------------------------------------------------------------------------
// Dispatcher
//------------------------------------------------------------------------------------------

fn Dispatcher(action, state, event):
  do message_reducer = ["SHOW_MODULES","SHOW_ACTIVITIES", "SHOW_UNITS", "SHOW_QUESTION", "SHOW_OPTIONS", "SHOW_MENU", "SHOW_AUDIO", "SHOW_IMAGE", "SHOW_VIDEO"]
  do response_reducer = ["HANDLE_MODULE_RESPONSE","HANDLE_UNIT_RESPONSE","HANDLE_ACTIVITY_RESPONSE"
    ,"GET_USER_COURSE","HANDLE_MENU_RESPONSE", "VALIDATE_NAME", "VALIDATE_EMAIL", "USER_RESPONSE", "QUIZ_RESPONSE"]
  do global_reducer = ["SELECT_ACTIVITY_BY_OPTION"]
  do service_reducer = ["GET_CEP_BY_LOCATION", "CREATE_USER"]
  do course_reducer = ["GET_COURSE"]

  if (message_reducer.find(action) != []){
    return MessageReducer(state, action)
  }
  else if (response_reducer.find(action) != []){
    return ResponseReducer(state, action, event)
  }
  else if (global_reducer.find(action) != []){
    return GlobalReducer(state, action, event)
  }
  else if (course_reducer.find(action) != []){
    return CourseReducer(state, action, event)
  }
  else if (service_reducer.find(action) != []){
    return ServiceReducer(state, action, event)
  }
  else {
    return ErrorReducer(state, "ACTION_NOT_FOUND")
  }

//------------------------------------------------------------------------------------------
// Reducers
//------------------------------------------------------------------------------------------
fn ServiceReducer(state, action, event):
  if (action == "GET_CEP_BY_LOCATION"){
    do cep = GetCEP(event)
    if(cep){
      return cep
    }
    else {
      return {"error": true}
    }
  }
  else if (action == "CREATE_USER"){
    do session_id = {"session_id": state.session_id}
    do user_id = CreateUserDataLayer(session_id)
    return user_id
  }
  /**
  * Subscribe for scheduler reminder message
  * @param {string} user_session
  * @param {object} position - position {step: string, flow: string}
  */
  else if (action == "SUBSCRIBE_REMINDER"){
    do payload = {
      "user_session": state.user_session,
      "delay": state.delay
    }
    do subscription_id = SubscribeBroadcast(payload)
    do subscription = {
      "id": subscription_id, 
      "type": "REMINDER",
      "position": state.position
    }

    return subscription
  }
  /**
  * Subscribe for scheduler broadcast message
  * @param {string} user_session
  * @param {object} position - position {step: string, flow: string}
  */
  else if (action == "SUBSCRIBE_BROADCAST"){
    do payload = {
      "user_session": state.user_session,
    }
    do subscription_id = SubscribeBroadcast(payload)
    do subscription = {
      "id": subscription_id,
      "type": "BROADCAST",
      "position": state.position
    }

    return subscription
  }
  else {
    return ErrorReducer(state, "ACTION_NOT_FOUND")
  }


fn MessageReducer(state, action):
  //TODO: POSTO MSG TO A LOG
  //do PostMisunderstood(airtableKey, current_activity, event, _metadata)
  if ( action == "SHOW_MODULES") {
    do must_have_fields = ["course"]
    do error = Validate(state, must_have_fields)
    if(error){
        return error
    }

    do params = {"activities": state.course, "field_text": "module_name", "field_id": "module_id"}
    //TODO: Change to option builder
    do options = OptionsReducer("CREATE_FROM_ACTIVITIES", params)
    do options = RemoveDuplicates(options, "id")
    do options = FixIndex(options)
    do message = MessageBuilder("FROM_OPTIONS", options)
    do state.message = message
    do state.options = options
    return state
  }
	else if (action == "SHOW_IMAGE"){
		do url = state.url
		return Image(url)
	}
	else if (action == "SHOW_VIDEO"){
		do url = state.url
		return Video(url)
	}
	else if (action == "SHOW_AUDIO"){
		do url = state.url
		return Audio(url)
	}
  else if (action == "SHOW_MENU"){
    do must_have_fields = ["options"]
    do error = Validate(state, must_have_fields)
    if(error){
        return error
    }

   return MessageBuilder("RENDER_MENU", state) 

  }
  else if (action == "SHOW_UNITS") {

    do params = {"activities": state.course, "field_text": "unit_name", "field_id": "unit_id"}
    do options = OptionsReducer("CREATE_FROM_ACTIVITIES", params)
    do options = RemoveDuplicates(options, "id")
    do options = FilterObjectArray(options, "module_id", "==", state.module_option.module_id)
    do options = FixIndex(options)
    do message = MessageBuilder("FROM_OPTIONS", options)
    do state.message = message
    do state.options = options
    return state 
  }
  else if (action == "SHOW_ACTIVITIES") {
    do must_have_fields = ["course", "unit_option"]
    do error = Validate(state, must_have_fields)
    if(error){
        return error
    }

    do options_definition = {"activities": state.course, "field_text": "activity_name", "field_id": "id"}
    do options = OptionsReducer("CREATE_FROM_ACTIVITIES", options_definition)
    debug options
    do options = RemoveDuplicates(options, "id")
    do options = FilterObjectArray(options, "unit_id", "==", state.unit_option.unit_id)
    do options = FixIndex(options)
    do message = MessageBuilder("FROM_OPTIONS", options)
    do state.message = message
    do state.options = options
    return state
  }
  else if (action == "SHOW_QUESTION"){

    return state.question.prompt
  }
  else if (action == "SHOW_OPTIONS"){
    do must_have_fields = ["prompt", "metadata", "course_id", "airtable_key"]
    do error = Validate(state, must_have_fields)
    if(error){
        return error
    }

    do options_state = RenderOptions(state.question)

    do AnalyticsReducer({
      "airtable_key": state.airtable_key, 
      "text": options_state.options, 
      "source": "BOT", 
      "metadata": state.metadata, 
      "course_id": state.course_id,
    }, "POST_MESSAGE")

    return options_state
  }
  else {
    return ErrorReducer(state, "ACTION_NOT_FOUND")
  }

/**
* All user responses pass by this reducer
*/
fn ResponseReducer(state, action, event):
  do global_command = GlobalCommands(event)

  if (global_command) {
    return global_command
  }

  if (action == "HANDLE_MODULE_RESPONSE") {
    do state.module_option = SelectOption(event, state.options, "index")
    return state
  }
  else if (action == "USER_RESPONSE"){
    do validation = {}
		if(state.user){
			do PostDataHub(state.user, stade.course.datalayer_id)
		}
    if(state.type){
      do validation = ValidateType(event, state.type) 
    }
    else {
      do validation = ValidateType(event, "TEXT")
    }
    if(validation.valid){
      return event
    }
    else {
      return validation
    }
    
  }
  else if (action == "HANDLE_UNIT_RESPONSE") {
    do state.unit_option = SelectOption(event, state.options, "index")
    return state
  }
  else if(action == "HANDLE_ACTIVITY_RESPONSE"){
    do state.activity_option = SelectOption(event, state.options, "index")
    return state
  }
  /**
  * Check if the user response is correct
  */
  else if (action == "QUIZ_RESPONSE"){
    return QuizSelection(event, state.answer, state.payload)
  }
  /*
  * Create course on startup
  */
  else if (action == "GET_USER_COURSE"){
    do must_have_fields = ["course_options", "metadata", "airtable_key", "flow"]
    do error = Validate(state, must_have_fields)
    if(error){
        return error
    }

    do course_options = state["course_options"]

    do course_selected = SelectCourse(event, course_options)
    
    if (course_selected.valid == false) {
      return {"goto": {"step": "misunderstood", "flow": state.flow}}
    }
    
    if (course_selected.goto){
      return {"goto": course_selected.goto}
    }

    do state["airtable_name"] = course_selected.course.table

    do course = CourseReducer(state, "GET_COURSE", event)

    return course
  }
  else if (action == "HANDLE_MENU_RESPONSE"){
    return MenuSelection(event.text, state.options)
  }
  else if (action == "VALIDATE_NAME"){
    do validation = ValidateType(event, "TEXT")
    if(validation.valid){
      do global_command = GlobalCommands(event.text)
      if(global_command){
        return global_command
      }
      else {
        return ValidateName(event.text)  
      }
    }
    else {
      return validation
    }
  }
  else if (action == "VALIDATE_EMAIL"){
    do validation = ValidateType(event, "TEXT")
    if(validation.valid){
      do global_command = GlobalCommands(event.text)
      if(global_command){
        return global_command
      }
      else {
        return ValidateEmail(event.text)  
      }
    }
    else {
      return validation
    }
  }
  else {
    return ErrorReducer("ResponseReducer", "ACTION_NOT_FOUND")
  }

fn OptionsReducer(action, state):
  if (action == "CREATE_FROM_ACTIVITIES") {

    do options = []
    foreach (activity, index) in state.activities {
      do text = activity[state.field_text]
      do element_id = activity[state.field_id]
      do build = {
        "id": element_id,
        "index": index,
        "name": text,
        "module_id": activity.module_id,
        "unit_id": activity.unit_id,
        "activity_id": activity.id,
    }
    do options.push(build)
    }
    return options
  }
  else if (action == "CREATE_FROM_LIST"){
    do must_have_fields = ["options"]
    do error =  Validate(state, must_have_fields)
    if (error) {
        return error
    }
    do list = []
    foreach (option, index) in state.options{
      do list.push({"name": index, "step_name": option.step_name, "flow_name": option.flow_name})
    }

    return list
  }
  else {
    return ErrorReducer("OptionReducer", "ACTION_NOT_FOUND")
  }

fn GlobalReducer(state, action, event):
  if (action == "SELECT_ACTIVITY_BY_OPTION"){
    return FindActivityByField(state.course, "id", state.activity_option.activity_id)
  }
  else {
    return ErrorReducer("ResponseReducer", "ACTION_NOT_FOUND")
  }

fn CourseReducer(state, action, event):
  if (action == "GET_COURSE"){  
    do must_have_fields = ["airtable_key", "airtable_name", "metadata"]
    do error =  Validate(state, must_have_fields)
    if (error) {
        return error
    }

    do airtable_key = state["airtable_key"]
    do airtable_name = state["airtable_name"]

    do activities = GetAirtableActivities(airtable_name, airtable_key)
    
    do course = {}

    do course["activities"] = activities
    
    do course["current_activity"] = GetNextActivity(activities)

    do current_activity = course["current_activity"]

    do course["current_question"] = GetNextQuestion(current_activity.questions)
    
    do course["metadata"] = state["metadata"]
    do course["modules"] = []
    do course["units"] = []
    do course["goto"] = course["current_question"].goto

    return course
  }
  else {
    return ErrorReducer("CourseReducer", "ACTION_NOT_FOUND")
  }

fn AnalyticsReducer(state, action):
  if (action == "POST_MESSAGE"){
    do must_have_fields = ["airtable_key", "text", "source", "metadata", "course_id"]
    do error =  Validate(state, must_have_fields)
    if (error) {
        return error
    }

    do PostMessage(
      state.airtable_key, 
      {
        "type": text, 
        "text": state.text
      }, 
      {
        "source": state.source,
        "bot_id": "B2B-Demo",
        "metadata": state.metadata,
        "course_id": state.course_id,
      }
    )
  }
  else {
    return ErrorReducer("AnalyticsReducer", "ACTION_NOT_FOUND")
  }


fn ActivityReducer(state, action):

fn QuestionReducer(state, action):

fn ConfigReducer(state, action):

fn ErrorReducer(state, action):
  if ( action == "ACTION_NOT_FOUND" ) {
    return "{{state}}: action not found"
  }
  else if (action == "MISSING_FIELD"){
    return "{{state.field}} field not found"
  }
  else {
    return ErrorReducer("ErrorReducer", "ACTION_NOT_FOUND")
  }

import {ValidateName, ValidateEmail, GlobalCommands} from global_functions 
import {Dispatcher} from reducers
import {GetCEP} from global_endpoints

start:

	do global_user_position = {"step": "start", "flow": "stoodi_onboarding"}
	// condi√ß√£o para usu√°rio que retornou
	do stoodi.user_phone = _metadata.user_phone

	do Dispatcher("USER_RESPONSE", {
	"user":{
	"whatsapp_id": stoodi.user_phone
	},
	"course": stoodi,
	}, NULL)

	do data_post = HTTP("https://sheetdb.io/api/v1/fzrqui04zg7g2").post({"data":[{ "Telefone": "{{stoodi.user_phone}}" }]}).send()

	goto step step_1

step_1:

	say Dispatcher("SHOW_QUESTION", 
	{
	"question": {
	"prompt":  "Ol√°√°√°! Que bom te ver por aqui üòç"  
	}, 
	"metadata": _metadata,
	"course_id": course_id,
	"airtable_key": global_airtable_key
	}, NULL
	) 

	goto step step_2

step_2:

  	say Wait(200)

	say Dispatcher("SHOW_QUESTION", 
	{
	"question": {
	"prompt":  "Eu sou o Stoodinho. Estou aqui pra te dar algumas dicas de organiza√ß√£o e te ajudar nos estudos rumo a aprova√ß√£o! Vamos l√°? üôÉ"  
	}, 
	"metadata": _metadata,
	"course_id": course_id,
	"airtable_key": global_airtable_key
	}, NULL
	)

  	say Wait(200)

  	goto getname

getname:

	do global_user_position = {"step": "getname", "flow": "stoodi_onboarding"}

	say Dispatcher("SHOW_QUESTION", 
	{
	"question": {
	"prompt":  "Qual o seu nome?"  
	}, 
	"metadata": _metadata,
	"course_id": course_id,
	"airtable_key": global_airtable_key
	}, NULL
	)

  	goto validatename

 //validate if name is indeed full and deal with this condition. validate if message is in text format and also deal w/ it
 //capitalizar primeira letra de cada palavra da array
validatename:
	do global_user_position = {"step": "validatename", "flow": "stoodi_onboarding"}

	hold
  	
	do name_validation = Dispatcher("VALIDATE_NAME", 
		{
		"course": "stoodi", 
		"metadata": _metadata,
		"course_id": course_id,
		"airtable_key": global_airtable_key
		}, event
	)

	if (name_validation.step && name_validation.flow){
		do step_name = name_validation.step
		do flow_name = name_validation.flow
		goto $step_name@$flow_name
	}
	else if (name_validation.valid == true) {
		do stoodi.user_first_name = name_validation.first_name
		do stoodi.user_last_name = name_validation.last_name
		do stoodi.user_full_name = name_validation.full_name

		do Dispatcher("USER_RESPONSE", 
		{
		"user": {
		"name": stoodi.user_full_name
		},
		"course": stoodi,
		}, event
		)

		do data_post = HTTP("https://sheetdb.io/api/v1/fzrqui04zg7g2/Telefone/{{stoodi.user_phone}}").put({"data":[{ "Nome": "{{stoodi.user_full_name}}" }]}).send()
			
		goto nameconfirmed
	}
	//If user response is not a text or is probably to his/her name
	else {
		goto step step_3
	}

step_3:
	
	say Dispatcher("SHOW_QUESTION", 
	{
	"question": {
	"prompt":  "üòÖ Ops! Eu preciso te conhecer melhor para continuar. Digite apenas seu nome."  
	}, 
	"metadata": _metadata,
	"course_id": course_id,
	"airtable_key": global_airtable_key
	}, NULL
	)

	do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()

	goto validatename

nameconfirmed:

	do global_user_position = {"step": "nameconfirmed", "flow": "stoodi_onboarding"}

	say Dispatcher("SHOW_QUESTION", 
	{
	"question": {
	"prompt":  "Muito prazer! üíô"  
	}, 
	"metadata": _metadata,
	"course_id": course_id,
	"airtable_key": global_airtable_key
	}, NULL
	)

	say Wait(200)

	goto getemail

getemail:

	do global_user_position = {"step": "getemail", "flow": "stoodi_onboarding"}

	say Dispatcher("SHOW_QUESTION", 
	{
	"question": {
	"prompt":  "Ah, tamb√©m preciso do seu e-mail de cadastro no Stoodi."  
	}, 
	"metadata": _metadata,
	"course_id": course_id,
	"airtable_key": global_airtable_key
	}, NULL
	)

	goto emailValidation

emailValidation:

	do global_user_position = {"step": "emailValidation", "flow": "stoodi_onboarding"}
	
  	hold

	do email_validation = Dispatcher("VALIDATE_EMAIL", 
		{
		"course": "stoodi", 
		"metadata": _metadata,
		"course_id": course_id,
		"airtable_key": global_airtable_key
		}, event
	)

	if (email_validation.step && email_validation.flow) {
		do step_name = email_validation.step
		do flow_name = email_validation.flow
		goto $step_name@$flow_name
	
  	}
	else if (email_validation.valid == false){ 
		goto step step_4
	// intent para recusar enviar email
	} 
	else if (event.intent.name match "Utilities.Reject"){ 
			
		goto step step_5

	}	
	else if (email_validation.valid == true) {

		do stoodi.user_email = event.text

		do Dispatcher("USER_RESPONSE", 
		{
		"user": {
			"email": stoodi.user_email
		},
		"course": stoodi,
		}, event
		)

		do data_post = HTTP("https://sheetdb.io/api/v1/fzrqui04zg7g2/Telefone/{{stoodi.user_phone}}").put({"data":[{ "Email": "{{stoodi.user_email}}" }]}).send()

		goto step step_7

	}
	else {
		goto step step_8
  	}

step_4:
	say Dispatcher("SHOW_QUESTION", 
	{
	"question": {
	"prompt":  "Hum, n√£o entendi. \n\nD√° uma olhada pra ver se voc√™ digitou o e-mail certinho, e me envia de novo, por favor."  
	}, 
	"metadata": _metadata,
	"course_id": course_id,
	"airtable_key": global_airtable_key
	}, NULL
	)

	do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()
	
	goto emailValidation2

step_5:
	say Dispatcher("SHOW_QUESTION", 
	{
	"question": {
	"prompt":  "N√£o se preocupe, a gente s√≥ vai usar seu e-mail para compartilhar informa√ß√µes relevantes para os seus estudos."  
	}, 
	"metadata": _metadata,
	"course_id": course_id,
	"airtable_key": global_airtable_key
	}, NULL
	)

	do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()

	goto step

step_6:

	say Wait(200)

	say Dispatcher("SHOW_QUESTION", 
	{
		"question": {
			"prompt":  "Qual o seu email?"  
	}, 
	"metadata": _metadata,
	"course_id": course_id,
	"airtable_key": global_airtable_key
	}, NULL
	)

	goto emailValidation2

step_7:

	say Dispatcher("SHOW_QUESTION", 
	{
		"question": {
			"prompt":  "Obrigado üíô"  
	}, 
	"metadata": _metadata,
	"course_id": course_id,
	"airtable_key": global_airtable_key
	}, NULL
	)

	say Wait(200)

	goto step getcep0

step_8:

	say Dispatcher("SHOW_QUESTION", 
		{
			"question": {
				"prompt":  "Hum, n√£o entendi. \n\nD√° uma olhada pra ver se voc√™ digitou o e-mail certinho, e me envia de novo, por favor."  
		}, 
		"metadata": _metadata,
		"course_id": course_id,
		"airtable_key": global_airtable_key
		}, NULL
	)
	do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()

	goto emailValidation2

emailValidation2:

	do global_user_position = {"step": "emailValidation2", "flow": "stoodi_onboarding"}
	//TODO: SHOULD WE USE THIS WAITS?
  	say Wait(200)
  	hold
  	do email_validation = Dispatcher("VALIDATE_EMAIL", 
	{
	"course": "stoodi", 
	"metadata": _metadata,
	"course_id": course_id,
	"airtable_key": global_airtable_key
	}, event
	)

	if (email_validation.step && email_validation.flow){
		do step_name = email_validation.step
		do flow_name = email_validation.flow
		goto $step_name@$flow_name
  	}
	else if (email_validation.valid == false){
    //vamos tratar para quem se recusar a segunda vez?
		do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()
		do stoodi.user_email = event.text
		do stoodi.user_email_not_final = true
		do data_post = HTTP("https://sheetdb.io/api/v1/fzrqui04zg7g2/Telefone/{{stoodi.user_phone}}").put({"data":[{ "Email": "{{stoodi.user_email}}" }]}).send()

		do Dispatcher("USER_RESPONSE", 
		{
		"user": {
			"email": stoodi.user_email
		},
		"course": stoodi,
		}, event
		)

		goto step_9
	
  	} 
	else if (event.intent.name match "Utilities.Reject"){ 
		goto step step_10
	}
	else if (event.to_lowercase().contains("meunome@email.com")) {
		goto step step_12
    	}
	else if (email_validation.valid == true) {
		do stoodi.user_email = event.text
		do data_post = HTTP("https://sheetdb.io/api/v1/fzrqui04zg7g2/Telefone/{{user_phone}}").put({"data":[{ "Email": "{{stoodi.user_email}}" }]}).send()	
		goto step step_13
	}
	else {
		do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{user_full_name}}* || {{user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()
		goto step step_14	
	}

step_9:

	say Dispatcher("SHOW_QUESTION", 
	{
		"question": {
			"prompt":  "Poxa, n√£o consegui validar o seu e-mail. Mas tudo bem, podemos seguir sem essa informa√ß√£o por enquanto..."  
	}, 
	"metadata": _metadata,
	"course_id": course_id,
	"airtable_key": global_airtable_key
	}, NULL
	)

	goto getcep0

step_10:

        say Dispatcher("SHOW_QUESTION", 
        	{
          		"question": {
           			"prompt":  "N√£o se preocupe, a gente s√≥ vai usar seu e-mail para compartilhar informa√ß√µes relevantes para os seus estudos."  
          	}, 
          	"metadata": _metadata,
          	"course_id": course_id,
          	"airtable_key": global_airtable_key
        	}, NULL
        )
        do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()

      	say Wait(200)

	goto step step_11

step_11:

	say Dispatcher("SHOW_QUESTION", 
	{
		"question": {
			"prompt":  "Qual o seu email?"  
	}, 
	"metadata": _metadata,
	"course_id": course_id,
	"airtable_key": global_airtable_key
	}, NULL
	)

	goto step emailValidation2
	
step_12:

	say Dispatcher("SHOW_QUESTION", 
		{
			"question": {
				"prompt":  "üòÖ Esse email n√£o vale! Digite o seu email."  
		}, 
		"metadata": _metadata,
		"course_id": course_id,
		"airtable_key": global_airtable_key
		}, NULL
	)
	do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{user_full_name}}* || {{user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()
	
	goto emailValidation2

step_13:

      say Dispatcher("SHOW_QUESTION", 
        	{
          		"question": {
           			"prompt":  "Obrigado üíô"  
          	}, 
          	"metadata": _metadata,
          	"course_id": course_id,
          	"airtable_key": global_airtable_key
        	}, NULL
        )

	goto step getcep0

step_14:
      	say Dispatcher("SHOW_QUESTION", 
        	{
          		"question": {
           			"prompt":  "Poxa, n√£o consegui validar o seu e-mail. Mas tudo bem, podemos seguir sem essa informa√ß√£o por enquanto..."  
          	}, 
          	"metadata": _metadata,
          	"course_id": course_id,
          	"airtable_key": global_airtable_key
        	}, NULL
        )

        goto getcep0

getcep0:

	do global_user_position = {"step": "getcep0", "flow": "stoodi_onboarding"}
  	say Dispatcher("SHOW_QUESTION", 
        	{
          		"question": {
           			"prompt":  "Sabia que temos estudantes espalhados por todo o Brasil? A maioria est√° concentrada nessas regi√µes, olha s√≥:"  
          	}, 
          	"metadata": _metadata,
          	"course_id": course_id,
          	"airtable_key": global_airtable_key
        	}, NULL
        )
  	
	say Wait(100)

	goto step step_15

step_15:

	say Dispatcher("SHOW_IMAGE", 
			{
				"url": "https://storage.googleapis.com/wapp11/media:0afb346c509f4964bb99e48e8366a78c.jpg",
				"metadata": _metadata,
				"course_id": course_id,
				"airtable_key": global_airtable_key
			}, NULL
		)

  	say Wait(2000)

	goto step_16

step_16:

	say Dispatcher("SHOW_QUESTION", 
			{
					"question": {
						"prompt":  "Me conta seu CEP ou me envie sua localiza√ß√£o para eu adicionar voc√™ no mapa tamb√©m! üìå"  
				}, 
				"metadata": _metadata,
				"course_id": course_id,
				"airtable_key": global_airtable_key
			}, NULL
		)
		
	goto getcep1

getcep1:

	do global_user_position = {"step": "getcep1", "flow": "stoodi_onboarding"}

  	//tratar input do cep com espa√ßo
	hold

	do global_command = Dispatcher("USER_RESPONSE", 
		{
		"type":  "TEXT",
		"metadata": _metadata,
		}, event
	)
	if (global_command.step && global_command.flow){
		do step_name = global_command.step
		do flow_name = global_command.flow
		goto $step_name@$flow_name
	}

	if(event.payload != "localization" && !event.text){
		
		do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()

		goto step step_21	
	}

	do cep_input = ""
	do cep_res = {"cep": "", "erro": false}

	if (event.payload == "localization"){

		do response = GetCEP({"latitude": event.latitude, "longitude": event.longitude})
		if(response.error){
			goto step step_17
		} 
		else {

			do Dispatcher("USER_RESPONSE", 
			{
			"user": {
			"geo": {
			"lat": event.latitude,
			"long": event.longitude,
			"postal_code": response.postal_code,
			}
			},
			"course": stoodi,
			}, event
			)

			do cep_res["cep"] = response.postal_code
			do cep_res["erro"] = false
		}

	}
	else if (event.text) {
		do cep_input = event.text
		do cep_input = cep_input.to_lowercase()
		do cep_res = HTTP("https://viacep.com.br/ws/{{cep_input}}/json/").get().send()
	}
	
	
	if(cep_res == null || cep_res.erro == true){

		do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()

		goto step step_22	
	} 
	else if( cep_res.cep ){

		do Dispatcher("USER_RESPONSE", 
				{
		"user": {
		"geo": {
			"postal_code": cep_res.cep,
		}
		},
			"course": stoodi
				}, event
			)
		
		say Wait(200)
		do stoodi.user_cep = cep_res.cep
		do data_post = HTTP("https://sheetdb.io/api/v1/fzrqui04zg7g2/Telefone/{{stoodi.user_phone}}").put({"data":[{ "CEP": "{{stoodi.user_cep}}" }]}).send() 

		goto step_18	
	} 
	else if (cep_input.contains("n√£o vou") || cep_input.contains("nao vou falar") || cep_input.contains("pra que") || cep_input.contains("por") || cep_input.contains("?")) {
        
		do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()
		say Wait(200)

		goto step_19
  	}

step_17:

	say Dispatcher("SHOW_QUESTION", 
		{
			"question": {
				"prompt":  "Poxa, n√£o consegui entender o seu CEP. Voc√™ pode conferir e digitar novamente, por favor? \n\nAssim √≥: 30300-300"  
		}, 
		"metadata": _metadata,
		"course_id": course_id,
		"airtable_key": global_airtable_key
		}, NULL
	)
	do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()
	
	goto getcep2

step_18:

	say Dispatcher("SHOW_QUESTION", 
		{
			"question": {
			"prompt":  "\o/"  
			}, 
			"metadata": _metadata,
			"course_id": course_id,
			"airtable_key": global_airtable_key
		}, NULL
	)

	goto stoodiintro

step_19:

	say Dispatcher("SHOW_QUESTION", 
		{
			"question": {
				"prompt":  "Pedimos o CEP para oferecer uma experi√™ncia personalizada para voc√™, seus dados est√£o seguros com a gente. üîí"  
		}, 
		"metadata": _metadata,
		"course_id": course_id,
		"airtable_key": global_airtable_key
		}, NULL
	)

	goto step step_20

step_20:

	say Dispatcher("SHOW_QUESTION", 
		{
			"question": {
				"prompt":  "Por favor, me diga o seu CEP conforme o exemplo: \n\nExemplo: 30030-000"  
		}, 
		"metadata": _metadata,
		"course_id": course_id,
		"airtable_key": global_airtable_key
		}, NULL
	)

        goto getcep2

step_21:

	say Dispatcher("SHOW_QUESTION", 
		{
		"question": {
			"prompt":  "Poxa, n√£o consegui entender o seu CEP. Voc√™ pode conferir e digitar novamente, por favor? \n\nAssim √≥: 30300-300"  
		}, 
		"metadata": _metadata,
		"course_id": course_id,
		"airtable_key": global_airtable_key
		}, NULL
	)

	goto getcep2

step_22:

	say Dispatcher("SHOW_QUESTION", 
		{
		"question": {
		"prompt":  "Poxa, n√£o consegui entender o seu CEP. Voc√™ pode conferir e digitar novamente, por favor? \n\nAssim √≥: 30300-300"  
		}, 
		"metadata": _metadata,
		"course_id": course_id,
		"airtable_key": global_airtable_key
		}, NULL
	)

	goto getcep2

getcep2:

	do global_user_position = {"step": "getcep2", "flow": "stoodi_onboarding"}
	hold

	do global_command = Dispatcher("USER_RESPONSE", 
		{
		"type":  "TEXT",
		"metadata": _metadata,
		}, event
	)
	if (global_command.step && global_command.flow){
		do step_name = global_command.step
		do flow_name = global_command.flow
		goto $step_name@$flow_name
	}

	if(event.payload != "localization" && !event.text){
		do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()
		goto step step_23
	}

	do cep_input = ""
	do cep_res = {"cep": "", "erro": false}

	if (event.payload == "localization"){
		do response = GetCEP({"latitude": event.latitude, "longitude": event.longitude})
		if(response.error){
			do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()
			goto step step_24
		} 
		else {
			do cep_res["cep"] = response.postal_code
			do cep_res["erro"] = false
		}
	}
	else if(event.text){
		do cep_input = event.text
		do cep_input = cep_input.to_lowercase()
		do cep_res = HTTP("https://viacep.com.br/ws/{{cep_input}}/json/").get().send()
	}

	if(cep_res == null || cep_res.erro == true){

		do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()
		goto step step_25
  		//else if localization value
	}
	else if (cep_input.contains("n√£o sei") || cep_input.contains("nao sei") || cep_input.contains("sei n√£o")) {

		do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()
		goto step step_26
  
  	} 
  	else if( cep_res.cep ){

		do Dispatcher("USER_RESPONSE", 
			{
			"user": {
			"geo": {
			"postal_code": cep_res.cep,
			}
			},
			"course": stoodi,
			}, event
		)

		say Wait(200)
		
		do stoodi.user_cep = cep_res.cep 

		goto step step_27

	}
	else if (cep_input.contains("n√£o vou") || cep_input.contains("nao vou falar") || cep_input.contains("pra que") || cep_input.contains("por") || cep_input.contains("?")) {
		do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()
		say Wait(200)
		do postdm = HTTP("https://hooks.slack.com/services/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").post({"username": "ChatForm","text": "*:fuelpump:{{stoodi.user_full_name}}* || {{stoodi.user_phone}}: \n:speaking_head_in_silhouette: _{{event.text}}_"}).send()
		goto step step_28
  	}

step_23:

      	say Dispatcher("SHOW_QUESTION", 
        	{
          		"question": {
           			"prompt":  "Poxa, n√£o t√¥ conseguindo entender sua localiza√ß√£o. üîé  \n\nMas tudo bem, podemos seguir sem essa informa√ß√£o por enquanto."  
          	}, 
          	"metadata": _metadata,
          	"course_id": course_id,
          	"airtable_key": global_airtable_key
        	}, NULL
        )


	goto stoodiintro

step_24:

	say Dispatcher("SHOW_QUESTION", 
		{
			"question": {
				"prompt":  "Poxa, n√£o t√¥ conseguindo entender sua localiza√ß√£o. üîé  \n\nMas tudo bem, podemos seguir sem essa informa√ß√£o por enquanto."  
		}, 
		"metadata": _metadata,
		"course_id": course_id,
		"airtable_key": global_airtable_key
		}, NULL
	)

	goto stoodiintro

step_25:

      	say Dispatcher("SHOW_QUESTION", 
        	{
          		"question": {
           			"prompt":  "Poxa, n√£o t√¥ conseguindo entender sua localiza√ß√£o. üîé  \n\nMas tudo bem, podemos seguir sem essa informa√ß√£o por enquanto."  
          	}, 
          	"metadata": _metadata,
          	"course_id": course_id,
          	"airtable_key": global_airtable_key
        	}, NULL
        )
      say Wait(200)
      goto stoodiintro

step_26:

	say Dispatcher("SHOW_QUESTION", 
	{
		"question": {
		"prompt":  "Poxa, n√£o t√¥ conseguindo entender sua localiza√ß√£o. üîé  \n\nMas tudo bem, podemos seguir sem essa informa√ß√£o por enquanto."  
		}, 
		"metadata": _metadata,
		"course_id": course_id,
		"airtable_key": global_airtable_key
	}, NULL
	)
	say Wait(200)
	goto stoodiintro

step_27:

      	say Dispatcher("SHOW_QUESTION", 
        	{
          		"question": {
           			"prompt":  "\o/"  
          	}, 
          	"metadata": _metadata,
          	"course_id": course_id,
          	"airtable_key": global_airtable_key
        	}, NULL
        )
    
        goto stoodiintro

step_28:

	say Dispatcher("SHOW_QUESTION", 
        	{
          		"question": {
           			"prompt":  "Pedimos o CEP para oferecer uma experi√™ncia personalizada para voc√™, seus dados est√£o seguros com a gente. üîí"  
          	}, 
          	"metadata": _metadata,
          	"course_id": course_id,
          	"airtable_key": global_airtable_key
        	}, NULL
        )

	goto step step_29

step_29:

	say Dispatcher("SHOW_QUESTION", 
        	{
          		"question": {
           			"prompt":  "Por favor, me diga o seu CEP conforme o exemplo:\nExemplo: 30030-000"  
          	}, 
          	"metadata": _metadata,
          	"course_id": course_id,
          	"airtable_key": global_airtable_key
        	}, NULL
        )

        goto getcep2

stoodiintro:

	do global_user_position = {"step": "stoodiintro", "flow": "stoodi_onboarding"}
  	say Dispatcher("SHOW_QUESTION", 
        	{
          		"question": {
           			"prompt":  "Eba! Agora deixa eu te contar como a gente pode te ajudar."  
          	}, 
          	"metadata": _metadata,
          	"course_id": course_id,
          	"airtable_key": global_airtable_key
        	}, NULL
        )
	say Wait(200)

	goto step step_30

step_30:

    	say Dispatcher("SHOW_QUESTION", 
        	{
          		"question": {
           			"prompt":  "No Stoodi, a gente organiza seus estudos e te indica exatamente o que voc√™ precisa estudar para conquistar sua aprova√ß√£o no Enem e vestibulares. üéì"  
          	}, 
          	"metadata": _metadata,
          	"course_id": course_id,
          	"airtable_key": global_airtable_key
        	}, NULL
        )
	say Wait(200)

	goto step step_31

step_31:

    	say Dispatcher("SHOW_QUESTION", 
        	{
          		"question": {
           			"prompt":  "Quer saber como?"  
          	}, 
          	"metadata": _metadata,
          	"course_id": course_id,
          	"airtable_key": global_airtable_key
        	}, NULL
        )

	goto step step_32

step_32:

	hold

	do var_event = Dispatcher("USER_RESPONSE", 
		{
		"course": "stoodi", 
		"metadata": _metadata,
		"course_id": course_id,
		"airtable_key": global_airtable_key
		}, event
	)
	if (var_event.step && var_event.flow){
		do step_name = var_event.step
		do flow_name = var_event.flow
		goto $step_name@$flow_name
	}

	do intro_input = event.intent.name

	//aprimorar condicionais para nope. "porque n√£o?" seria recusado  intent:Utilities.Reject

	if (intro_input match "Utilities.Reject") {
		goto step step_33
	}
	else {
		goto step step_34
	}

step_33:

	say Dispatcher("SHOW_QUESTION", 
		{
			"question": {
				"prompt":  "Sem problemas üòÉ"  
		}, 
		"metadata": _metadata,
		"course_id": course_id,
		"airtable_key": global_airtable_key
		}, NULL
	)

	goto flow stoodi_organizarmeusestudos

step_34:

	say Dispatcher("SHOW_QUESTION", 
		{
				"question": {
					"prompt":  "Legal! Olha s√≥ um pouquinho de como funciona:"  
			}, 
			"metadata": _metadata,
			"course_id": course_id,
			"airtable_key": global_airtable_key
		}, NULL
	)

	say Wait(200)

	goto step step_35

step_35:

	say Dispatcher("SHOW_VIDEO", 
		{
			"url": "https://www.youtube.com/watch?v=9voPV6fRYL0",
			"metadata": _metadata,
			"course_id": course_id,
			"airtable_key": global_airtable_key
		}, NULL
	)

	//wait para o video
	say Wait(3000)

	goto step step_36

step_36:

	say Dispatcher("SHOW_QUESTION", 
		{
				"question": {
					"prompt":  "Incr√≠vel n√©? Temos muito o que estudar juntos!"  
			}, 
			"metadata": _metadata,
			"course_id": course_id,
			"airtable_key": global_airtable_key
		}, NULL
	)

	goto flow stoodi_organizarmeusestudos